import heapq

moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]

# Goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

def manhattan(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val - 1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist

def get_neighbors(state):
    neighbors = []
    zx, zy = [(i, j) for i in range(3) for j in range(3) if state[i][j] == 0][0]
    for dx, dy in moves:
        nx, ny = zx + dx, zy + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[zx][zy], new_state[nx][ny] = new_state[nx][ny], new_state[zx][zy]
            neighbors.append(new_state)
    return neighbors

def is_goal(state):
    return state == goal_state

def serialize(state):
    return str(state)

def solve_puzzle(start_state):
    frontier = []
    heapq.heappush(frontier, (manhattan(start_state), 0, start_state, []))
    visited = set()

    while frontier:
        est_total_cost, cost_so_far, state, path = heapq.heappop(frontier)

        if is_goal(state):
            return path + [state]

        visited.add(serialize(state))

        for neighbor in get_neighbors(state):
            if serialize(neighbor) not in visited:
                heapq.heappush(frontier, (cost_so_far + 1 + manhattan(neighbor), cost_so_far + 1, neighbor, path + [state]))

    return None

if __name__ == "__main__":
    start = [[1, 2, 3],
             [4, 0, 6],
             [7, 5, 8]]  # You can change this start state

    print("Solving the 8-Puzzle Problem...\n")

    solution = solve_puzzle(start)

    if solution:
        print("Solution steps:")
        for index, step in enumerate(solution):
            print(f"Step {index}:")
            for row in step:
                print(row)
            print()
    else:
        print("No solution found.")
